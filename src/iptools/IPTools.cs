// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools : global::haxe.lang.HxObject {
		
		static IPTools() {
			unchecked{
				#line 8 "/my-component/src/iptools/IPTools.hx"
				global::haxe.lang.FieldLookup.addFields(new int[]{957002115}, new string[]{"registerMyMethods"});
			}
		}
		#line default
		
		public IPTools(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public IPTools(global::maglev.MagLev maglev) {
			#line 11 "/my-component/src/iptools/IPTools.hx"
			global::iptools.IPTools.__hx_ctor_iptools_IPTools(this, maglev);
		}
		#line default
		
		protected static void __hx_ctor_iptools_IPTools(global::iptools.IPTools __hx_this, global::maglev.MagLev maglev) {
			#line 12 "/my-component/src/iptools/IPTools.hx"
			__hx_this.maglev = maglev;
			__hx_this.registerMyMethods();
		}
		#line default
		
		public global::maglev.MagLev maglev;
		
		public virtual void registerMyMethods() {
			#line 17 "/my-component/src/iptools/IPTools.hx"
			global::maglev.MagLev bus = this.maglev;
			#line 19 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.SubnetMaskToCIDR", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_19__Fun(bus)));
			#line 30 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.CalcCIDR", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_30__Fun(bus)));
			#line 41 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.IPToDecimal", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_41__Fun(bus)));
			#line 52 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.IP4FromDecimal", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_52__Fun(bus)));
			#line 63 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.IP6FromDecimal", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_63__Fun(bus)));
			#line 74 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.IPv4ToIPv6", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_74__Fun(bus)));
			#line 85 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.ExpandIPv6", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_85__Fun(bus)));
			#line 96 "/my-component/src/iptools/IPTools.hx"
			this.maglev.register("IPTools.CompressIPv6", global::maglev.MagLevFunction.fromFunction(new global::iptools.IPTools_registerMyMethods_96__Fun(bus)));
		}
		#line default
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 8 "/my-component/src/iptools/IPTools.hx"
				switch (hash) {
					case 858513194:
					{
						#line 8 "/my-component/src/iptools/IPTools.hx"
						this.maglev = ((global::maglev.MagLev) (@value) );
						#line 8 "/my-component/src/iptools/IPTools.hx"
						return @value;
					}
					
					
					default:
					{
						#line 8 "/my-component/src/iptools/IPTools.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 8 "/my-component/src/iptools/IPTools.hx"
				switch (hash) {
					case 957002115:
					{
						#line 8 "/my-component/src/iptools/IPTools.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "registerMyMethods", 957002115)) );
					}
					
					
					case 858513194:
					{
						#line 8 "/my-component/src/iptools/IPTools.hx"
						return this.maglev;
					}
					
					
					default:
					{
						#line 8 "/my-component/src/iptools/IPTools.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 8 "/my-component/src/iptools/IPTools.hx"
				switch (hash) {
					case 957002115:
					{
						#line 8 "/my-component/src/iptools/IPTools.hx"
						this.registerMyMethods();
						#line 8 "/my-component/src/iptools/IPTools.hx"
						break;
					}
					
					
					default:
					{
						#line 8 "/my-component/src/iptools/IPTools.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				#line 8 "/my-component/src/iptools/IPTools.hx"
				return null;
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			#line 8 "/my-component/src/iptools/IPTools.hx"
			baseArr.push("maglev");
			#line 8 "/my-component/src/iptools/IPTools.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_19__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_19__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 19 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 19 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 21 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.SubnetMaskToCIDR"));
				#line 23 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 25 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.SubnetMaskToCIDR\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 27 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_30__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_30__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 30 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 30 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 32 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.CalcCIDR"));
				#line 34 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 36 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.CalcCIDR\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 38 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_41__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_41__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 41 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 41 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 43 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.IPToDecimal"));
				#line 45 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 47 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.IPToDecimal\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 49 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_52__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_52__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 52 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 52 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 54 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.IP4FromDecimal"));
				#line 56 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 58 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.IP4FromDecimal\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 60 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_63__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_63__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 63 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 63 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 65 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.IP6FromDecimal"));
				#line 67 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 69 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.IP6FromDecimal\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 71 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_74__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_74__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 74 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 74 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 76 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.IPv4ToIPv6"));
				#line 78 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 80 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.IPv4ToIPv6\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 82 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_85__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_85__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 85 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 85 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 87 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.ExpandIPv6"));
				#line 89 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 91 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.ExpandIPv6\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 93 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace iptools {
	public class IPTools_registerMyMethods_96__Fun : global::haxe.lang.Function {
		
		public IPTools_registerMyMethods_96__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 96 "/my-component/src/iptools/IPTools.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 96 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 98 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("IPTools.CompressIPv6"));
				#line 100 "/my-component/src/iptools/IPTools.hx"
				data.push(global::maglev.MagLevString.fromString("iptools"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 102 "/my-component/src/iptools/IPTools.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'IPTools.CompressIPv6\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 104 "/my-component/src/iptools/IPTools.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}


